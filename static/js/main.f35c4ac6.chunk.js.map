{"version":3,"sources":["Calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["button_values","Calculator","props","useState","initialValue","operation","setOperation","hasFailed","setHasfailed","useEffect","toLowerCase","OrderCalculator","type","numeric_buttons","filter","a","isNaN","sort","b","non_numeric_buttons","utils_buttons","array_final","aux_array","i","value","push","unshift","concat","apply","indexOf","button_util","pos_button_util","splice","math","create","all","MathOperator","buttonpressed","evaluate","toString","length","slice","className","name","id","disabled","map","button","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f35c4ac6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./index.css\";\r\nimport { create, all } from \"mathjs\";\r\n/**\r\n * This will be the Calculator component, it could have the property initialValue that would initialize the calculator with a custom value insted of 0.\r\n */\r\n//Let's create an array with buttons of the calculator\r\n//Edited for testing the OrderCalculator function.\r\nconst button_values = [\r\n  9,\r\n  1,\r\n  2,\r\n  3,\r\n  7,\r\n  5,\r\n  6,\r\n  4,\r\n  8,\r\n  0,\r\n  \"C\",\r\n  \"=\",\r\n  \".\",\r\n  \"+\",\r\n  \"-\",\r\n  \"/\",\r\n  \"*\",\r\n  \"←\",\r\n];\r\nconst Calculator = (props) => {\r\n  //It will have an operation state for the logic part of the component.\r\n  const [operation, setOperation] = useState(\r\n    props.initialValue ? props.initialValue : \"0\"\r\n  );\r\n  //Add a state for errors or infinity results.\r\n  const [hasFailed, setHasfailed] = useState(false);\r\n  useEffect(() => {\r\n    if (hasFailed) {\r\n      //If fails, restart calculator to 0.\r\n      setHasfailed(false);\r\n      setOperation(\"0\");\r\n      return;\r\n    }\r\n    if (\r\n      operation.toLowerCase() === \"syntax error\" ||\r\n      operation.toLowerCase() === \"infinity\"\r\n    )\r\n      setHasfailed(true);\r\n  }, [operation]);\r\n  //Let's order the buttons, divided by numeric and non-numeric values.\r\n  //If someone wants to add buttons all it takes is to add it to the button_values array, but if it's an util button and not an operation one, it has to be added to the util_buttons array and code it's logic on the switch.\r\n  const OrderCalculator = (type) => {\r\n    //Let's order the array of numeric buttons in order to allow mistakes from the initial array of buttons\r\n    let numeric_buttons = [...button_values]\r\n      .filter((a) => !isNaN(a))\r\n      .sort((a, b) => (a > b ? 1 : -1));\r\n    let non_numeric_buttons = [...button_values].filter((a) => isNaN(a));\r\n    //This array will help to differentiate the arithmetical operation buttons and those that are util for the logic, such as clear, equals, etc..\r\n    let utils_buttons = [\"C\", \"=\", \".\", \"←\"];\r\n    let array_final = [];\r\n    //In order to keep it simple and ordered, we will get a type value, and separate the cases so it will return only numeric, operation and util buttons for each case.\r\n    switch (type) {\r\n      case \"numeric\": {\r\n        let aux_array = [];\r\n        let i = 0;\r\n        for (var value in numeric_buttons) {\r\n          /**\r\n           *  we have to considerate cases where the remainder of i divided by 3 is 0 to put our auxiliar array in the start of the final array,\r\n           *  and restart the auxiliar array again, this will create three columns for the numberpad of the calculator with the standard format.\r\n           */\r\n          aux_array.push(value);\r\n          if (i % 3 === 0) {\r\n            array_final.unshift(aux_array);\r\n            aux_array = [];\r\n          }\r\n          i++;\r\n        }\r\n        array_final = [].concat.apply([], array_final);\r\n        //We do it this way so it gives the standard 789 -> first row,456 -> second row,123 -> third row, 0 -> fourth row format, instead of just an ordered 1234...\r\n        return array_final;\r\n      }\r\n      case \"operation\": {\r\n        //Here we will use our utils_buttons array to differentiate between the arithmetical operation buttons and the util ones.\r\n        array_final = non_numeric_buttons.filter(\r\n          (a) => utils_buttons.indexOf(a) === -1\r\n        );\r\n        return array_final;\r\n      }\r\n      case \"utils\": {\r\n        let aux_array = [];\r\n        //Let's iterate on the util_buttons array to splice and get each util button on a separate array in order to return one array with only util buttons.\r\n        for (var button_util of utils_buttons) {\r\n          let pos_button_util = non_numeric_buttons.indexOf(button_util);\r\n          if (pos_button_util > -1) {\r\n            aux_array.push(non_numeric_buttons.splice(pos_button_util, 1));\r\n          }\r\n        }\r\n        array_final = [].concat.apply([], aux_array);\r\n        return array_final;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  //This will be the logical of the Calculator, all the process will be evaluated by the library mathjs.\r\n  const math = create(all);\r\n  const MathOperator = (buttonpressed) => {\r\n    switch (buttonpressed) {\r\n      case \".\": {\r\n        setOperation(operation + buttonpressed);\r\n        break;\r\n      }\r\n      case \"=\": {\r\n        try {\r\n          setOperation(math.evaluate(operation).toString());\r\n        } catch {\r\n          setOperation(\"Syntax Error\");\r\n        }\r\n        break;\r\n      }\r\n      case \"C\": {\r\n        setOperation(\"0\");\r\n        break;\r\n      }\r\n      case \"←\": {\r\n        operation.length === 1\r\n          ? setOperation(\"0\")\r\n          : setOperation(operation.slice(0, -1));\r\n        break;\r\n      }\r\n      default: {\r\n        operation === \"0\"\r\n          ? setOperation(buttonpressed)\r\n          : setOperation(operation + buttonpressed);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"calculator\">\r\n      <div className=\"calculator__results\">\r\n        <input\r\n          type=\"text\"\r\n          value={operation}\r\n          name=\"result\"\r\n          id=\"result\"\r\n          disabled\r\n        />\r\n      </div>\r\n      <div className=\"calculator__buttons\">\r\n        {/* Put the buttons in distinct divs for orders sake and an easiest way to approach the styling */}\r\n        <div className=\"operation_buttons\">\r\n          {OrderCalculator(\"operation\").map((button) => {\r\n            return (\r\n              <button\r\n                key={button.toString()}\r\n                className=\"operation_button\"\r\n                onClick={() => MathOperator(button)}\r\n              >\r\n                {button}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"numeric_buttons\">\r\n          {OrderCalculator(\"numeric\").map((button) => {\r\n            return (\r\n              <button\r\n                key={button.toString()}\r\n                className=\"numeric_button\"\r\n                onClick={() => MathOperator(button)}\r\n              >\r\n                {button}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"util_buttons\">\r\n          {OrderCalculator(\"utils\").map((button) => {\r\n            return (\r\n              <button\r\n                key={button.toString()}\r\n                className=\"util_button\"\r\n                onClick={() => MathOperator(button)}\r\n              >\r\n                {button}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCalculator.propTypes = {\r\n  initialValue: PropTypes.string,\r\n};\r\n\r\nexport default Calculator;\r\n","import React from 'react';\nimport './App.css';\nimport Calculator from './Calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Test Simple Calculator with ReactJS.</h1>\n      <h4>By Ricardo Riveros Rivera.</h4>\n      <Calculator initialValue=\"123\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}